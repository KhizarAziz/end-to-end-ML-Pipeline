# Name of the GitHub Actions workflow
name: Sync to EC2

# Trigger the workflow on push to the 'main' branch
on:
  push:
    branches:
      - main  # Specify the branch to listen for push events

# Define jobs
jobs:
  # Name of the job, in this case, "deploy"
  deploy:
    # Run this job on an Ubuntu-latest runner
    runs-on: ubuntu-latest

    # List of steps to execute
    steps:
    # Step to checkout the code from the current repo
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Prepare SSH directory
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh 

    - name: Setup SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa             

    - name: Test SSH Connection
      run: ssh -i ~/.ssh/id_rsa -vvv -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} "echo 'SSH Test Successful'"


    # Step to sync the code to the EC2 instance
    - name: Sync to EC2
      run: |
        # Add the EC2 host to known_hosts to avoid SSH authenticity confirmation
        ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts
        # Use rsync to sync the code
        rsync -rav --delete ./ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/ec2-user/end-to-end-pipeline-syned
      # Environment variables used in this step
      env:
        HOST: ${{ secrets.HOST }}            # EC2 hostname
        USERNAME: ${{ secrets.USERNAME }}    # SSH username for EC2
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH private key for authentication


    # - name: Docker build and restart
    #   run: |
    #     ssh -i ~/.ssh/id_rsa ${{ secrets.USERNAME }}@${{ secrets.HOST }} 'cd /home/ec2-user/end-to-end-pipeline-syned && sudo docker build -t end-end-ml-image . && sudo docker stop end-end-container-name && sudo docker rm end-end-container-name && sudo docker run -it  --name end-end-container-name -d end-end-ml-image'